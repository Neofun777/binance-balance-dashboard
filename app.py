#!/usr/bin/env python3
"""
Binance Balance Dashboard ‚Äì Streamlit Community Cloud ready üèÑ‚Äç‚ôÄÔ∏è
=============================================================

* –¢—Ä–∏ ¬´—Å—Ç—Ä–∞–Ω–∏—Ü—ã¬ª –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ (`sidebar.selectbox`):
  1. **Dashboard** ‚Äì —Å—É–º–º–∞—Ä–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º.
  2. **Accounts** ‚Äì –¥–µ—Ç–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
  3. **Add Keys** ‚Äì —Ñ–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API‚Äë–∫–ª—é—á–µ–π –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.

* **–•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª—é—á–µ–π**
  - –í–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: `st.session_state["accounts"]`.
  - –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–∞ Cloud: —Å–µ–∫—Ü–∏—è `[accounts]` –≤ `Secrets`. –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ¬´Add Keys¬ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∏—Ç—Å—è TOML‚Äë—Å–Ω–∏–ø–ø–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ Settings¬†‚Üí Secrets.

* **–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏**: `streamlit`, `requests`.

–†–∞–∑–º–µ—â–∞–µ—à—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub ‚Üí Deploy to Streamlit Community Cloud ‚Üí –≤ "Secrets" –¥–æ–±–∞–≤–ª—è–µ—à—å –±–ª–æ–∫ `[accounts]` ‚Üí Profit.
"""

import time
import hmac
import hashlib
import urllib.parse
from datetime import datetime, timezone
from functools import lru_cache

import requests
import streamlit as st

API_BASE = "https://api.binance.com"

# -----------------------------------------------------------------------------
# Low‚Äëlevel Binance helpers
# -----------------------------------------------------------------------------

def _timestamp_ms() -> int:
    return int(time.time() * 1000)


def _sign(query_string: str, secret: str) -> str:
    return hmac.new(secret.encode(), query_string.encode(), hashlib.sha256).hexdigest()


def _call_binance(endpoint: str, key: str, secret: str):
    qs = urllib.parse.urlencode({"timestamp": _timestamp_ms()})
    signature = _sign(qs, secret)
    url = f"{API_BASE}{endpoint}?{qs}&signature={signature}"
    headers = {"X-Mbx-ApiKey": key, "Accept": "application/json"}
    r = requests.get(url, headers=headers, timeout=10)
    r.raise_for_status()
    return r.json()


# -----------------------------------------------------------------------------
# Price cache (USDT‚Äë–ø–∞—Ä—ã) ‚Äì –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥—Ä—É–±–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
# -----------------------------------------------------------------------------

@st.cache_data(ttl=300)
def get_price_usdt(asset: str) -> float:
    if asset.upper() in ("USDT", "BUSD", "FDUSD"):
        return 1.0
    symbol = asset.upper() + "USDT"
    try:
        r = requests.get(f"{API_BASE}/api/v3/ticker/price", params={"symbol": symbol}, timeout=5)
        r.raise_for_status()
        return float(r.json()["price"])
    except Exception:
        return 0.0  # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∞—Ä–∞ ‚Äì –≤–µ—Ä–Ω—ë–º 0


# -----------------------------------------------------------------------------
# –ë–∞–ª–∞–Ω—Å—ã –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
# -----------------------------------------------------------------------------

@lru_cache(maxsize=32)
def fetch_balances(api_key: str, api_sec: str):
    data = _call_binance("/api/v3/account", api_key, api_sec)
    balances = []
    for b in data.get("balances", []):
        free = float(b["free"])
        locked = float(b["locked"])
        total = free + locked
        if total > 0:
            balances.append({
                "asset": b["asset"],
                "free": free,
                "locked": locked,
                "total": total,
                "usd": total * get_price_usdt(b["asset"]),
            })
    return balances


# -----------------------------------------------------------------------------
# Streamlit UI helpers
# -----------------------------------------------------------------------------

st.set_page_config(page_title="Binance Balances", layout="wide", page_icon="üí∞")

# Bootstrap session_state with secrets
if "accounts" not in st.session_state:
    st.session_state["accounts"] = {}
    if "accounts" in st.secrets:
        for label, creds in st.secrets["accounts"].items():
            st.session_state.accounts[label] = {
                "API_KEY": creds["API_KEY"],
                "API_SECRET": creds["API_SECRET"],
            }

page = st.sidebar.selectbox("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ("Dashboard", "Accounts", "Add Keys"))

# -----------------------------------------------------------------------------
# Page: Add Keys
# -----------------------------------------------------------------------------

if page == "Add Keys":
    st.header("‚ûï Add Sub‚ÄëAccount")
    with st.form("add_sub"):
        label = st.text_input("Label (Sub Name)")
        api_key = st.text_input("API Key", type="password")
        api_sec = st.text_input("Secret Key", type="password")
        submitted = st.form_submit_button("Save (session)")
    if submitted and label and api_key and api_sec:
        st.session_state.accounts[label] = {"API_KEY": api_key, "API_SECRET": api_sec}
        st.success(f"{label} –¥–æ–±–∞–≤–ª–µ–Ω, –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É.")
        st.markdown("**–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞:** —Å–∫–æ–ø–∏—Ä—É–π –±–ª–æ–∫ –Ω–∏–∂–µ –≤ _Secrets_ –Ω–∞ Streamlit Cloud ‚Üí –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ app.")
        toml = f"""[accounts.{label}]
API_KEY = \"{api_key}\"
API_SECRET = \"{api_sec}\""""""
        st.code(toml, language="toml")

    if st.session_state.accounts:
        st.subheader("–¢–µ–∫—É—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã (session + secrets)")
        table = [{"label": k, "key": "‚Ä¢" * 6, "secret": "‚Ä¢" * 6} for k in st.session_state.accounts]
        st.table(table)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")

# -----------------------------------------------------------------------------
# Page: Dashboard (aggregate)
# -----------------------------------------------------------------------------

elif page == "Dashboard":
    st.header("üìä Dashboard ‚Äì –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º")
    if not st.session_state.accounts:
        st.warning("–î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ **Add Keys**.")
        st.stop()

    agg = {}
    total_usd = 0.0
    for label, creds in st.session_state.accounts.items():
        try:
            bals = fetch_balances(creds["API_KEY"], creds["API_SECRET"])
        except Exception as e:
            st.error(f"{label}: {e}")
            continue
        for b in bals:
            a = b["asset"]
            if a not in agg:
                agg[a] = 0.0
            agg[a] += b["total"]
        total_usd += sum(x["usd"] for x in bals)

    col1, col2 = st.columns(2)
    col1.metric("–ê–∫—Ç–∏–≤–æ–≤", len(agg))
    col2.metric("–ü—Ä–∏–º–µ—Ä–Ω–æ USD", f"{total_usd:,.2f}")

    # –¢–∞–±–ª–∏—Ü–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
    rows = [{"Asset": a, "Total": t, "‚âàUSD": t * get_price_usdt(a)} for a, t in agg.items()]
    rows.sort(key=lambda r: r["‚âàUSD"], reverse=True)
    st.dataframe(rows, use_container_width=True, hide_index=True)

# -----------------------------------------------------------------------------
# Page: Accounts (per‚Äëaccount view)
# -----------------------------------------------------------------------------

elif page == "Accounts":
    st.header("üóÇ –ë–∞–ª–∞–Ω—Å—ã –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º")
    if not st.session_state.accounts:
        st.warning("–î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ **Add Keys**.")
        st.stop()

    for label, creds in st.session_state.accounts.items():
        with st.expander(label, expanded=False):
            try:
                bals = fetch_balances(creds["API_KEY"], creds["API_SECRET"])
            except Exception as e:
                st.error(str(e))
                continue
            if not bals:
                st.write("–ü—É—Å—Ç–æ.")
                continue
            st.dataframe(bals, hide_index=True, use_container_width=True)
